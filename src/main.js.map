{"version":3,"sources":["main.js"],"names":["ANIMATION_TIMING","SCENE_CHANGE","TITLE_IN","SUBTITLE_IN","VALUE_GROUP_IN","ELEMENT_EXIT","ELEMENT_EXIT_DELAY","TRANSITIONS","OPACITY","TRANSFORM","elements","title","document","querySelector","subtitles","querySelectorAll","valueGroup","dollarSymbol","value","rightColumn","circleText","createCharacterSpan","span","createElement","textContent","char","createCharacterSpans","text","map","wrapTextInSpans","wordSpans","element","originalWords","Array","from","isHighlight","classList","contains","forEach","appendChild","setupValueGroup","setupSubtitles","animateTextIn","duration","delay","spans","totalSpans","length","baseDelay","index","setTimeout","style","opacity","transform","animateTextOut","Promise","reverse","transition","resolve","sceneTransitions","toSceneTwo","body","remove","add","backToSceneOne","animateSceneTwo","async","let","currentDelay","animateExitSequence","await","setupAnimationListeners","gradient","addEventListener","event","animationName","initializeAnimations","titleElement"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * Constants and Configuration\n */\nconst ANIMATION_TIMING = {\n  SCENE_CHANGE: {\n    TITLE_IN: 1600,\n    SUBTITLE_IN: 500,\n    VALUE_GROUP_IN: 300,\n    ELEMENT_EXIT: 300,\n    ELEMENT_EXIT_DELAY: 60\n  },\n  TRANSITIONS: {\n    OPACITY: \"opacity 0.15s cubic-bezier(0.4, 0.0, 0.2, 1)\",\n    TRANSFORM: \"transform 0.25s cubic-bezier(0.4, 0.0, 0.2, 1)\"\n  }\n};\n\n/**\n * DOM Element Selection Helpers\n */\nconst elements = {\n  title: () => document.querySelector(\".frame__title\"),\n  subtitles: () => document.querySelectorAll(\".frame__subtitle\"),\n  valueGroup: () => document.querySelector(\".frame__value-group\"),\n  dollarSymbol: () => document.querySelector(\".frame__dollar-symbol\"),\n  value: () => document.querySelector(\".frame__value\"),\n  rightColumn: () => document.querySelector(\".frame__right-column\"),\n  circleText: () => document.querySelector(\".frame__circle-text\")\n};\n\n/**\n * Character Span Creation and Setup\n */\nconst createCharacterSpan = (char) => {\n  const span = document.createElement(\"span\");\n  span.textContent = char;\n  return span;\n};\n\nconst createCharacterSpans = (text) => {\n  return [...text].map(createCharacterSpan);\n};\n\nconst wrapTextInSpans = (element) => {\n  const wordSpans = element.querySelectorAll(\"span\");\n  \n  // Store original text and properties\n  const originalWords = Array.from(wordSpans).map(span => ({\n    element: span,\n    text: span.textContent,\n    isHighlight: span.classList.contains(\"frame__highlight\")\n  }));\n\n  // Clear and rebuild with character spans\n  wordSpans.forEach(span => span.textContent = \"\");\n  originalWords.forEach(({ element, text }) => {\n    const charSpans = createCharacterSpans(text);\n    charSpans.forEach(span => element.appendChild(span));\n  });\n};\n\n/**\n * Element Setup Functions\n */\nconst setupValueGroup = () => {\n  const valueGroup = elements.valueGroup();\n  if (!valueGroup) return;\n\n  // Setup dollar symbol\n  const dollarSymbol = elements.dollarSymbol();\n  if (dollarSymbol) {\n    const span = createCharacterSpan(dollarSymbol.textContent);\n    dollarSymbol.textContent = \"\";\n    dollarSymbol.appendChild(span);\n  }\n\n  // Setup value\n  const value = elements.value();\n  if (value) {\n    const span = createCharacterSpan(value.textContent);\n    value.textContent = \"\";\n    value.appendChild(span);\n  }\n};\n\nconst setupSubtitles = () => {\n  const subtitles = elements.subtitles();\n  subtitles.forEach(wrapTextInSpans);\n};\n\n/**\n * Animation Functions\n */\nconst animateTextIn = (element, duration, delay = 0) => {\n  const spans = element.querySelectorAll(\"span > span, span\");\n  const totalSpans = spans.length;\n  const baseDelay = duration / totalSpans;\n\n  Array.from(spans).forEach((span, index) => {\n    setTimeout(() => {\n      span.style.opacity = \"1\";\n      span.style.transform = \"translateY(0)\";\n    }, delay + (index * baseDelay));\n  });\n\n  return delay + (totalSpans * baseDelay);\n};\n\nconst animateTextOut = (element) => {\n  return new Promise((resolve) => {\n    const spans = element.querySelectorAll(\n      \"span > span, .frame__dollar-symbol > span, .frame__value > span\"\n    );\n    const totalSpans = spans.length;\n    const baseDelay = ANIMATION_TIMING.SCENE_CHANGE.ELEMENT_EXIT / totalSpans;\n\n    Array.from(spans)\n      .reverse()\n      .forEach((span, index) => {\n        span.style.transition = `${ANIMATION_TIMING.TRANSITIONS.OPACITY}, ${ANIMATION_TIMING.TRANSITIONS.TRANSFORM}`;\n\n        setTimeout(() => {\n          span.style.opacity = \"0\";\n          setTimeout(() => {\n            span.style.transform = \"translateY(-25px)\";\n            if (index === totalSpans - 1) {\n              setTimeout(resolve, 50);\n            }\n          }, 25);\n        }, index * baseDelay);\n      });\n  });\n};\n\n/**\n * Scene Management\n */\nconst sceneTransitions = {\n  toSceneTwo: () => {\n    document.body.classList.remove(\"scene-one\");\n    document.body.classList.add(\"scene-two\");\n  },\n  backToSceneOne: () => {\n    document.body.classList.remove(\"scene-two\");\n    document.body.classList.add(\"scene-one\");\n  }\n};\n\n/**\n * Animation Sequences\n */\nconst animateSceneTwo = async () => {\n  const { SCENE_CHANGE } = ANIMATION_TIMING;\n  const subtitles = elements.subtitles();\n  const valueGroup = elements.valueGroup();\n  let currentDelay = 0;\n\n  // Animate first subtitle\n  if (subtitles[0]) {\n    currentDelay = animateTextIn(subtitles[0], SCENE_CHANGE.SUBTITLE_IN, currentDelay);\n  }\n\n  // Animate value group\n  if (valueGroup) {\n    currentDelay = animateTextIn(valueGroup, SCENE_CHANGE.VALUE_GROUP_IN, currentDelay);\n  }\n\n  // Animate second subtitle\n  if (subtitles[1]) {\n    currentDelay = animateTextIn(subtitles[1], SCENE_CHANGE.SUBTITLE_IN, currentDelay);\n  }\n};\n\nconst animateExitSequence = async () => {\n  const subtitles = elements.subtitles();\n  const valueGroup = elements.valueGroup();\n  const delay = ANIMATION_TIMING.SCENE_CHANGE.ELEMENT_EXIT_DELAY;\n\n  // Animate in reverse order\n  if (subtitles[1]) await animateTextOut(subtitles[1]);\n  await new Promise(resolve => setTimeout(resolve, delay));\n  \n  if (valueGroup) await animateTextOut(valueGroup);\n  await new Promise(resolve => setTimeout(resolve, delay));\n  \n  if (subtitles[0]) await animateTextOut(subtitles[0]);\n};\n\n/**\n * Event Listeners\n */\nconst setupAnimationListeners = () => {\n  const rightColumn = elements.rightColumn();\n  const gradient = document.querySelector('.gradient');\n  const circleText = document.querySelector('.frame__circle-text');\n\n  // First animation sequence\n  rightColumn.addEventListener(\"animationend\", async () => {\n    sceneTransitions.toSceneTwo();\n    // Add active class to circle text when scene two starts\n    circleText.classList.add('active');\n    await animateTextOut(elements.title());\n    await animateSceneTwo();\n  });\n\n  // Circle text scale and fade\n  circleText.addEventListener(\"animationend\", (event) => {\n    if (event.animationName === 'stickerSlap') {\n      // After the slap animation, add the removing class\n      circleText.classList.add('removing');\n    }\n  });\n\n  // Reset loop on gradient animation end\n  gradient.addEventListener(\"animationend\", async () => {\n    // First animate out scene two content\n    await animateExitSequence();\n    \n    // Additional delay to ensure all transitions complete\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Reset to scene one and cleanup circle text classes\n    sceneTransitions.backToSceneOne();\n    \n    // Remove all classes from circle text\n    const circleText = elements.circleText();\n    if (circleText) {\n      circleText.classList.remove('active', 'removing');\n    }\n\n    // Delay before starting new animation to ensure clean state\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Animate title back in\n    animateTextIn(elements.title(), ANIMATION_TIMING.SCENE_CHANGE.TITLE_IN);\n  });\n};\n\n/**\n * Initialization\n */\nconst initializeAnimations = () => {\n  const titleElement = elements.title();\n  wrapTextInSpans(titleElement);\n  setupSubtitles();\n  setupValueGroup();\n  animateTextIn(titleElement, ANIMATION_TIMING.SCENE_CHANGE.TITLE_IN);\n  setupAnimationListeners();\n};\n\n// Start the animation\ninitializeAnimations();"]}